<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ChenJing]]></title>
  <link href="http://Jing5022.github.io/atom.xml" rel="self"/>
  <link href="http://Jing5022.github.io/"/>
  <updated>2014-10-09T16:11:28+08:00</updated>
  <id>http://Jing5022.github.io/</id>
  <author>
    <name><![CDATA[Marlon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[刷机经历]]></title>
    <link href="http://Jing5022.github.io/blog/2014/10/07/shua-ji-jing-li/"/>
    <updated>2014-10-07T15:24:01+08:00</updated>
    <id>http://Jing5022.github.io/blog/2014/10/07/shua-ji-jing-li</id>
    <content type="html"><![CDATA[<p>说到刷机，截止至目前我只刷过两次，说不上经验丰富，只是现在已经厌倦了各种类似装系统的事情，特别是因为不熟悉还需要去研究的，所以记下自己刷机的一些步骤，以后需要刷机的时候可以直接参照着做，快速解决问题。第一次刷机后手机仍然不能用，一直以为刷机失败了，后来才知道是手机硬件坏了，作为一个刷机新手，真的很难判断是自己的操作错误还是ROM包的问题，亦或是硬件出了问题。第二次刷机是朋友的手机，和我的手机是同个型号的，这次刷机成功了，其实跟上次是完全一样的操作，只是这次的没有出现其他的问题，所以买手机还是不要贪便宜，买好一点的，刷机也简单，不会出现太多其他的问题干扰思路。下面是我的刷机步骤（手机型号：神舟e50 T1）：</p>

<h4>1.在手机上安装的软件</h4>

<p>手机需先安装root软件并获取root权限，然后安装移动叔叔，打开并得获取root权限，选择Recovery更新，找到这个<a href="http://yunpan.cn/cg2Ps6J2t7nJ9">recovery.img</a>（获取码：76f2），更新成功后重启即可。Recovery模式类似PE系统，移动叔叔刷入这个系统操作很简单。</p>

<h4>2.Recovery模式中的操作</h4>

<p>从移动叔叔的操作中重启后会自动进入Recovery模式，也可以在关机状态下先按音量“+”键再按住电源键进入。选择简体中文&mdash;擦除和格式化分区&mdash;擦除cache/恢复出厂设置&mdash;返回&mdash;从SD卡安装ROM包<a href="http://www.miui.com/download-214.html">update.zip</a>（该ROM包要提前放置于手机内存中），安装完成后返回主页，进入电源选项进行重启即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么评论文章]]></title>
    <link href="http://Jing5022.github.io/blog/2013/12/14/comments/"/>
    <updated>2013-12-14T14:24:15+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/12/14/comments</id>
    <content type="html"><![CDATA[<p>在这里写文章，主要是表达自己的想法，不在乎访问量的多少，也不在乎有哪些人来访过，但希望能与读者有些交流，希望可以看到他人的看法。所以我的文章提供评论功能，希望有读者留言。不过这个Octopress博客不支持游客评论，所以想评论的读者还需注册Disque帐号，下面简单介绍如何注册Disque帐号并登录，使得可以在Octopress博客中留言，记住注册邮箱及密码，再次评论无需再注册。</p>

<h4>1.在文章下面的评论部分点击login，然后选择Disque</h4>

<p><img src="http://Jing5022.github.io/images/mypictures/0009.jpg" alt="disque" /></p>

<h4>2.打开了Disque登录页面，点击Need an account进行注册Disque帐号</h4>

<p><img src="http://Jing5022.github.io/images/mypictures/0010.jpg" alt="account" /></p>

<h4>3.进入注册页面输入帐号名、邮箱及密码后点击Register进行注册</h4>

<p><img src="http://Jing5022.github.io/images/mypictures/0011.jpg" alt="register" /></p>

<h4>4.到此完成注册，部分浏览器需要刷新文章页面，头像需要另外设置，这里不讲解</h4>

<p><img src="http://Jing5022.github.io/images/mypictures/0012.jpg" alt="result" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[珍惜拥有]]></title>
    <link href="http://Jing5022.github.io/blog/2013/12/13/zhen-xi-yong-you/"/>
    <updated>2013-12-13T23:56:24+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/12/13/zhen-xi-yong-you</id>
    <content type="html"><![CDATA[<p>前几天和我一块来实习的同学要回学校备考四级，我报了六级但这次仍没有准备，所以能考过的概率很小很小，许多同学都不考了。而我最后还是决定再考一次，毕竟是最后一次了，因为希望仍在，我没有理由不去争取，至少日后不会为此感到遗憾。现在是实习阶段，当然是以工作为重，也正是这个原因，我没有和那位同学一块回去，而是选择双12之后才回去，因为双12对于我们这种电子商务公司来说是个特殊的日子。</p>

<p>就在我同学回去的当天，才知道我有一个舍友和一个师妹当天生日，我当时好想好想回去给他们过生日，只可惜已经定了回去的日期，回去也赶不上Party了。可能就因为有了这个遗憾，我开始怀念在学校的日子，开始想念学校里的人，开始意识到我的大学生活正在离我远去，突然好想好想珍惜剩下的这点大学，即使是待在宿舍里无所事事的时光，也将不再有。所以这几天晚上，我坐在床上听着音乐，很主动地找朋友们聊天。一方面是怀着这样的心情需要多与他人沟通，另一方面是确实应该主动跟新老朋友们多点联系。</p>

<p>今天，我回来了，当我看到校园的时候，心里有一种说不出的激动，好像失去已久的这一切突然又回来了一样。再次走在惠大的校道上，微笑的看着行走在路上的同学或师弟师妹们，有种很特别的亲切感，这感觉好神奇好神奇！回到熟悉的宿舍更让人兴奋了，我的兄弟们呀，你们还好吗！很可惜有个舍友去仲恺实习了！！！放下行旅，哥们几个聊聊实习的情况，谈谈对工作上新的看法，哈哈，然后去其他宿舍串门，跟其他同学吹吹水啦。</p>

<p>下午打开电脑，看到毽球协会的师弟师妹们在Q群上说有活动，就赶紧往旭日广场跑了，没想到一回来又能跟师弟师妹们踢上毽子了。这种机会真的不多了，这次回来几天还能有这等好事撞上呀！这次我06级的大大大师兄也来了，还特意回去拿了他自己的几个毽子过来，真是个热爱毽子的好师兄呀！说到毽子，我还真的是它结缘了呢！因为踢毽子我认识了一个师姐，然后我来到了她所在的这家公司实习，在公司里我经常和同事们踢毽子，昨天老板还买了个移动版可拆装羽毛球网架放在公司，可以踢网毽了。还有，我在大学里因为毽子认识了好多人，是毽子让我增添了友谊，是毽子让我有了更多的体育锻炼，是毽子让我的大学生活更加丰富多彩。很感谢毽子给我带来的这些。今晚，还在协会的Q群里和那个06级的师兄还有一个13级的师妹聊天，我是10级的，都跨越了好几个年级呢！在毽子的世界里是么有年龄界限的。</p>

<p>大学真的正在离我远去，我也正在珍惜。今晚看到<a href="http://weibo.com/wuwei1003673996">读书</a>的一条微博：“青少年时期，我们总梦想着离开父母的一天。而改天，却换成了父母离开我们了。于是我们就只能梦想着，能否有一时片刻，重新变回寄居父母屋檐下的孩子，能抱抱他们，不害羞地告诉他们，我们爱他们，为了让自己安心而紧紧依偎在他们身边”。看完心里酸酸的，大学快结束了，我会去珍惜它，因为它还在。那父母呢？总有一天，他们也会离我而去，那现在健在的他们，不是更应该去珍惜吗！！！！！才知道，原来，很多很重要的东西正在渐渐远去，而我却一直没发现。好好珍惜父母，好好珍惜自己的兄弟姐妹，好好珍惜身边的每一个人。多联系朋友，送上自己的慰问；多帮助他人，提高自己的价值；多珍惜所拥有的，这就是珍惜自己的人生吧。</p>

<p><img src="http://Jing5022.github.io/images/mypictures/0008.jpg" alt="dushu" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github免密钥推送代码]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/29/push-to-github-without-password/"/>
    <updated>2013-11-29T23:05:40+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/29/push-to-github-without-password</id>
    <content type="html"><![CDATA[<p>每次向Github提交代码时都要输入Github账号和密码，这是件挺麻烦的事。先在Ubuntu下完成免输入账号及密码就能向Github推送代码的设置，之后再到Windows下也做相应的设置。</p>

<h4>1.修改Git的config文件</h4>

<ul>
<li>打开～/.git/config 文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[core]
</span><span class='line'>  repositoryformatversion = 0
</span><span class='line'>  filemode = true
</span><span class='line'>  bare = false
</span><span class='line'>  logallrefupdates = true
</span><span class='line'>[branch "source"]
</span><span class='line'>  remote = origin
</span><span class='line'>  merge = refs/heads/master
</span><span class='line'>[remote "origin"]
</span><span class='line'>  url = git@github.com:username/username.github.com.git
</span><span class='line'>  fetch = +refs/heads/*:refs/remotes/origin/*</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改url中地username为相应的github账号名，不要用https协议</li>
</ul>


<h4>2.检查本机是否已存在ssh keys</h4>

<p>输入以下指令查看~/.ssh文件夹下是否存在名为id_ras.pub或id_dsa.pub的文件，如果不存在则继续第三步，否则跳过第三步直接到第四步</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.ssh
</span><span class='line'>ls</span></code></pre></td></tr></table></div></figure>


<h4>3.创建新的ssh keys</h4>

<p>执行以下指令，在<code>～/.ssh/id_rsa</code>文件中生成密钥</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa -C "your_email@example.com" #这里需要输入邮箱
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/home/marlon/.ssh/id_rsa): #这里按Enter直接通过
</span><span class='line'>Enter passphrase (empty for no passphrase): #输入Github密码
</span><span class='line'>Enter same passphrase again: #再次输入密码
</span><span class='line'>Your identification has been saved in /home/marlon/.ssh/id_rsa.
</span><span class='line'>Your public key has been saved in /home/marlon/.ssh/id_rsa.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>12:80:8a:a7:cf:42:a9:f2:c6:67:8c:6c:9c:cc:4b:5c your_email@example.com
</span><span class='line'>The key's randomart image is:
</span><span class='line'>  ......</span></code></pre></td></tr></table></div></figure>


<h4>4.添加密钥到Github账号上</h4>

<ul>
<li>复制<code>～/.ssh/id_rsa</code>文件的内容</li>
<li>打开Github选择<code>Acount settings</code>再选择<code>SSH Keys</code></li>
<li>随便给Title取名，将复制地信息张贴到Key中</li>
<li>点击<code>Add key</code>并输入Github密码完成添加</li>
</ul>


<h4>5.测试</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -T git@github.com</span></code></pre></td></tr></table></div></figure>


<p>如果出现以下信息则说明设置成功</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hi username! You've successfully authenticated, but GitHub does not provide shell access.</span></code></pre></td></tr></table></div></figure>


<h4>6.克隆项目</h4>

<p>这里不要用https协议，所以克隆时使用下面第一条指令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:username/username.github.com.git myblog
</span><span class='line'>git clone https://github.com/username/username.github.com.git myblog</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/S模式与B/S模式]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/c-slash-s-and-b-slash-s/"/>
    <updated>2013-11-27T18:19:26+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/c-slash-s-and-b-slash-s</id>
    <content type="html"><![CDATA[<h4>1.C/S模式</h4>

<p>C/S（Client/Server，客户机/服务器）方式的网络计算模式，其工作分别由服务器和客户机完成。服务器负责管理数据库的访问，为多个客户程序管理数据，并对数据库进行检索和排序，此外还要对客户机/服务器网络结构中的数据库安全层加锁，进行保护。客户机负责与用户的交互，收集用户信息，通过网络向服务器请求对诸多数据库、电子表格或文档等信息的处理工作。所以，在C/S模式中，资源是不对等的，是一种“胖客户机”，“瘦服务器”的结构。</p>

<h4>2.B/S模式</h4>

<p>B/S（Browser/Server，浏览器/服务器）方式的网络结构，在客户端统一采用如Netscape和IE一类的浏览器，通过Web浏览器的向服务器提出请求，由Web服务器对数据库进行操作，并将结果传回客户端。在B/S体系结构系统中，用户通过浏览器向分布在网络上的许多服务器发出请求，服务器对浏览器请求进行处理，将用户所需的信息返回到浏览器。B/S结构简化了客户机的工作，客户机只需配置少量的客户端软件即可。但服务器将担负更多的工作，对数据库的访问和应用程序的执行都将在服务器上完成。即当浏览器发出请求后，其数据请求、加工、返回结果以及动态网页生成等工作全部由Web服务器完成。</p>

<h4>3.C/S模式与B/S模式的比较</h4>

<ul>
<li>开发和维护成本

<ul>
<li>C/S开发和维护成本较高，对不同客户端需要开发不同的程序，且应用程序的安装、修改和升级均需要在所有的客户机上进行</li>
<li>B/S模式中，客户端只需有通用的浏览器，所有的维护与升级工作都是在服务器上执行，无须对客户机进行任何改变，因而大大降低了开发和维护的成本</li>
</ul>
</li>
<li>客户端负载

<ul>
<li>C/S的客户端具有显示和处理数据的功能，负载重。随着应用系统的功能越来越复杂，客户端的应用程序也变得越来越庞大</li>
<li>B/S模式的客户端把事务处理逻辑部分分给了服务器，客户端只需进行显示即可</li>
</ul>
</li>
<li>可移植性
-C/S模式移植困难，因为用不同开发工具开发的应用程序，一般情况下互不兼容，难以移植到其他平台上运行
-B/S模式在客户端安装的是通用的浏览器，不存在移植性问题</li>
<li>用户界面

<ul>
<li>C/S模式的用户界面是由客户端安装的软件决定的，因此用户界面各不相同</li>
<li>B/S通过通用的浏览器访问应用程序，其浏览器的界面统一，使用时类似于浏览网页</li>
</ul>
</li>
<li>安全性

<ul>
<li>C/S模式适用于专人使用的系统，可以通过严格的管理派发软件，适用于安全性要求较高的专用应用软件</li>
<li>B/S适用于交互性要求较多，使用人数较多，安全性要求不是很高的应用环境</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的Ubuntu系统配置（13.04版本）]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/my-ubuntu-configuration/"/>
    <updated>2013-11-27T16:49:34+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/my-ubuntu-configuration</id>
    <content type="html"><![CDATA[<h4>1.更新源</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<h4>2.安装软件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install guake
</span><span class='line'>sudo apt-get install gnome-do
</span><span class='line'>sudo apt-get install openssh-client
</span><span class='line'>sudo apt-get install openssh-server
</span><span class='line'>sudo apt-get install git-core
</span><span class='line'>sudo apt-get install tig
</span><span class='line'>sudo apt-get install mysql-server
</span><span class='line'>sudo apt-get install mysql-client
</span><span class='line'>sudo apt-get install curl
</span><span class='line'>// 安装rvm，装后vim ~/.bashrc，加入[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
</span><span class='line'>\curl -L https://get.rvm.io | bash -s stable
</span><span class='line'>rvm install ruby 1.9.3
</span><span class='line'>rvm install ruby 2.0.0
</span><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo apt-get install ack-grep
</span><span class='line'>// 安装右键打开终端脚本，安装完执行killall nautilus
</span><span class='line'>sudo apt-get install nautilus-open-terminal</span></code></pre></td></tr></table></div></figure>


<h4>3.Backspace按键失效</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gvim  ~/.config/nautilus/accels  
</span><span class='line'>// 在文件最下方添加下面这行代码  
</span><span class='line'>(gtk_accel_path "&lt;Actions>/ShellActions/Up" "BackSpace")
</span><span class='line'> // 重启Nautilus
</span><span class='line'>nautilus -q</span></code></pre></td></tr></table></div></figure>


<h4>4.Guake Terminal GUI 显示错误</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /usr/share/guake/guake.glade  
</span><span class='line'>&lt;property name="gravity">north&lt;/property>
</span><span class='line'>// 将static改为north</span></code></pre></td></tr></table></div></figure>


<h4>5.安装搜狗拼音输入法</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:fcitx-team/nightly  
</span><span class='line'>sudo apt-get update  
</span><span class='line'>sudo apt-get install fcitx-sogoupinyin  
</span><span class='line'>im-switch -s fcitx -z default</span></code></pre></td></tr></table></div></figure>


<h4>6.设置关机快捷键</h4>

<ul>
<li>系统设置&mdash;键盘&mdash;快捷键&mdash;自定义快捷键&mdash;“+”</li>
<li>在命令输入：<code>/usr/lib/indicator-session/gtk-logout-helper -s</code></li>
</ul>


<h4>7.自动挂载磁盘</h4>

<ul>
<li>查看本地磁盘信息: <code>ls -l /dev/disk/by-uuid</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 2C10CFFB10CFCA52 -> ../../sda6
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 3A88EA3B88E9F573 -> ../../sda1
</span><span class='line'>lrwxrwxrwx 1 root root 11 May 24 14:14 5326af25-5d9d-43f3-9db2-34c57053ddcb -> ../../sda10
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 7C70FFB270FF716E -> ../../sda7
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 a177ed6b-9d64-4b74-b610-23f51ce325b9 -> ../../sda9
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 D8E42E3BE42E1BEE -> ../../sda8
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 F6E499FDE499BFF3 -> ../../sda5</span></code></pre></td></tr></table></div></figure>


<ul>
<li>打开配置文件: <code>sudo gvim /etc/fstab</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UUID=5a0bd731-6b01-4cbc-b088-b0cb70ca463c /               ext4    errors=remount-ro 0       1
</span><span class='line'>UUID=a177ed6b-9d64-4b74-b610-23f51ce325b9 none        swap      sw                           0       0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加要挂载的磁盘，如本人配置添加以下信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UUID=F6E499FDE499BFF3          /media/Softwares     ntfs    utf8,umask=007,gid=46       0         1
</span><span class='line'>UUID=2C10CFFB10CFCA52        /media/Daily               ntfs    utf8,umask=007,gid=46       0         1
</span><span class='line'>UUID=7C70FFB270FF716E          /media/Learning        ntfs    utf8,umask=007,gid=46       0         1
</span><span class='line'>UUID=D8E42E3BE42E1BEE          /media/Others            ntfs    utf8,umask=007,gid=46       0         1</span></code></pre></td></tr></table></div></figure>


<h4>8.SSH无密码登录</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen  // 生成密钥，直接回车至结束  
</span><span class='line'>ssh-copy-id user@id  // 复制SSH密钥到目标主机</span></code></pre></td></tr></table></div></figure>


<h4>9.设置右键管理员打开文件夹</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:noobslab/apps  
</span><span class='line'>sudo apt-get update  
</span><span class='line'>sudo apt-get install open-as-administrator  
</span><span class='line'>nautilus -q</span></code></pre></td></tr></table></div></figure>


<ul>
<li>右击一个文件夹</li>
<li>选择脚本(s)</li>
<li>选择<code>open-as-administrator.sh</code></li>
<li>输入密码便以管理员身份进入目录</li>
</ul>


<h4>10. 安装清道夫</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:tualatrix/ppa  
</span><span class='line'>sudo apt-get update  
</span><span class='line'>sudo apt-get install ubuntu-tweak</span></code></pre></td></tr></table></div></figure>


<h4>11.备份系统</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su
</span><span class='line'>cd
</span><span class='line'>tar cvpzf backup.tgz / --exclude=/proc --exclude=/lost+found --exclude=/backup.tgz --exclude=/mnt --exclude=/sys --exclude=/media</span></code></pre></td></tr></table></div></figure>


<h4>12.还原系统</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su
</span><span class='line'>cd
</span><span class='line'>tar xvpfz backup.tgz -C /</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/pai-xu-suan-fa/"/>
    <updated>2013-11-27T14:31:02+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/pai-xu-suan-fa</id>
    <content type="html"><![CDATA[<h4>1.选择排序</h4>

<ul>
<li>说明：遍历所有元素，将小的元素放到第一个位置上，再遍历除第一个位置外所有元素，将最小元素放到第二个位置，以此类推至完成排序</li>
<li>代码：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void selectionSort(int ary[]) {  
</span><span class='line'>    int min;  
</span><span class='line'>    int temp;  
</span><span class='line'>    for(int i = 0; i &lt; ary.length - 1; i++) {  
</span><span class='line'>        min = i;  
</span><span class='line'>        for(int j = i + 1; j &lt; ary.length; j++) {  
</span><span class='line'>            if(ary[j] &lt; ary[min]) {  
</span><span class='line'>                min = j;  
</span><span class='line'>            }  
</span><span class='line'>        }  
</span><span class='line'>        temp = ary[min];  
</span><span class='line'>        ary[min] = ary[i];  
</span><span class='line'>        ary[i] = temp;  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>示意图：</li>
</ul>


<p><img src="http://Jing5022.github.io/images/mypictures/0003-xuan-ze-pai-xu.gif" alt="xuanze" /></p>

<h4>2.插入排序</h4>

<ul>
<li>说明：将第一个元素作为第一部分，后面所有元素作为第二部分，逐次从第二部分抽出第一个插入到第一部分，使第一部分有序，第二部分抽完即完成排序</li>
<li>代码：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void insertSort(int ary[]) {  
</span><span class='line'>    for(int i=1; i&lt;ary.length; i++) {  
</span><span class='line'>        int temp = ary[i];  
</span><span class='line'>        int j = i;  
</span><span class='line'>        if(ary[j-1] > ary[i]){  
</span><span class='line'>            while(j >= 1 && ary[j-1] > temp) {  
</span><span class='line'>                ary[j] = ary[j-1];  
</span><span class='line'>                j--;  
</span><span class='line'>            }  
</span><span class='line'>            ary[j] = temp;  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>示意图：</li>
</ul>


<p><img src="http://Jing5022.github.io/images/mypictures/0004.gif" alt="charu" /></p>

<h4>3.冒泡排序</h4>

<ul>
<li>说明：从左到右，将所有元素两两进行比较，通过交换位置使更大的元素放在右边，第一遍后最大的元素到了最右边，第二遍是第二大的放在倒数第二个位置</li>
<li>代码：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void bubbleSort(int ary[]) {  
</span><span class='line'>    for(int i = ary.length -1; i >= 0; i--) {  
</span><span class='line'>        for(int j = 0; j &lt;= i - 1; j++) {  
</span><span class='line'>            if(ary[j] > ary[j+1]) {  
</span><span class='line'>                int temp = ary[j];  
</span><span class='line'>                ary[j] = ary[j+1];  
</span><span class='line'>                ary[j+1] = temp;  
</span><span class='line'>            }  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>示意图：</li>
</ul>


<p><img src="http://Jing5022.github.io/images/mypictures/0005.gif" alt="maopao" /></p>

<h4>4.快速排序</h4>

<ul>
<li>说明：从右向左搜索比第一个元素小的元素，找到则与第一个元素交换，再从左向右搜索比最后一个元素大的元素，找到也交换，直到从两边搜索到相遇。此时以相遇点为分界线将元素分为两部分，使用递归对这两部分分别进行如前面一样的操作</li>
<li>代码：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void quickSort(int a[], int start, int end){  
</span><span class='line'>    int i,j;  
</span><span class='line'>    i = start;  
</span><span class='line'>    j = end;  
</span><span class='line'>    if((a==null)||(a.length==0))  
</span><span class='line'>        return;  
</span><span class='line'>    while(i&lt;j){  
</span><span class='line'>        while(i&lt;j&&a[i]&lt;=a[j]) {     //以数组start下标的数据为key，右侧扫描  
</span><span class='line'>            j--;  
</span><span class='line'>        }  
</span><span class='line'>        if(i&lt;j){                   //右侧扫描，找出第一个比key小的，交换位置  
</span><span class='line'>            int temp = a[i];  
</span><span class='line'>            a[i] = a[j];  
</span><span class='line'>            a[j] = temp;  
</span><span class='line'>        }  
</span><span class='line'>        while(i&lt;j&&a[i]&lt;a[j]){    //左侧扫描（此时a[j]中存储着key值）  
</span><span class='line'>            i++;  
</span><span class='line'>        }  
</span><span class='line'>        if(i&lt;j){                 //找出第一个比key大的，交换位置  
</span><span class='line'>            int temp = a[i];  
</span><span class='line'>            a[i] = a[j];  
</span><span class='line'>            a[j] = temp;  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>    if(i-start>1){  
</span><span class='line'>        //递归调用，把key前面的完成排序  
</span><span class='line'>        quickSort(a,start,i-1);  
</span><span class='line'>    }  
</span><span class='line'>    if(end-j>1){  
</span><span class='line'>        quickSort(a,j+1,end);    //递归调用，把key后面的完成排序  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>示意图：</li>
</ul>


<p><img src="http://Jing5022.github.io/images/mypictures/0006.gif" alt="kuaishu" /></p>

<h4>5.归并排序</h4>

<ul>
<li>说明：写一个方法将两个有序的数组合并成一个新的有序数组，使用递归将待排序数组分组（每组只有一个元素），再使用递归运用前面提到的方法各组两两合并</li>
<li>代码：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void mergearray(int a[], int first, int mid, int last, int temp[]) {    
</span><span class='line'>    int i = first, j = mid + 1;    
</span><span class='line'>    int m = mid, n = last;    
</span><span class='line'>    int k = 0;    
</span><span class='line'>        
</span><span class='line'>    while (i &lt;= m && j &lt;= n) {    
</span><span class='line'>        if (a[i] &lt;= a[j])    
</span><span class='line'>            temp[k++] = a[i++];    
</span><span class='line'>        else    
</span><span class='line'>            temp[k++] = a[j++];    
</span><span class='line'>    }    
</span><span class='line'>        
</span><span class='line'>    while (i &lt;= m)    
</span><span class='line'>        temp[k++] = a[i++];    
</span><span class='line'>        
</span><span class='line'>    while (j &lt;= n)    
</span><span class='line'>        temp[k++] = a[j++];    
</span><span class='line'>        
</span><span class='line'>    for (i = 0; i &lt; k; i++)    
</span><span class='line'>        a[first + i] = temp[i];    
</span><span class='line'>}    
</span><span class='line'>public static void mergesort(int a[], int first, int last, int temp[]) {    
</span><span class='line'>    if (first &lt; last) {    
</span><span class='line'>        int mid = (first + last) / 2;    
</span><span class='line'>        mergesort(a, first, mid, temp);    //左边有序    
</span><span class='line'>        mergesort(a, mid + 1, last, temp); //右边有序    
</span><span class='line'>        mergearray(a, first, mid, last, temp); //再将二个有序数列合并    
</span><span class='line'>    }    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>示意图：</li>
</ul>


<p><img src="http://Jing5022.github.io/images/mypictures/0007.gif" alt="guibing" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[远程桌面登录]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/yuan-cheng-zhuo-mian-deng-lu/"/>
    <updated>2013-11-27T14:12:59+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/yuan-cheng-zhuo-mian-deng-lu</id>
    <content type="html"><![CDATA[<h4>1.必要设置在被连接的电脑上操作</h4>

<ul>
<li>关闭防火墙</li>
<li>设置系统用户密码</li>
<li>开启远程登录

<ul>
<li>允许远程协助连接这台计算机（R），在该项前打勾</li>
<li>不允许连接到这台计算机（D），该选项不选，另外两项可任选其中一项</li>
</ul>
</li>
</ul>


<h4>2.在局域网内部实现（在使用连接的电脑上操作）</h4>

<ul>
<li>打开运行，输入“mstsc”并回车</li>
<li>输入被连接电脑的局域网ip（如：192.168.1.100）并回车</li>
<li>输入被连接电脑的用户名和密码或只输入密码</li>
</ul>


<h4>3.通过广域网实现</h4>

<ul>
<li>进入路由器管理界面，选择转发规则，再选择虚拟服务器（在被连接的电脑上操作）</li>
<li>添加新条目，输入端口号（默认为3389，如果没做更改则填3389），输入本机的局域网ip地址（在被连接的电脑上操作）
<img src="http://Jing5022.github.io/images/mypictures/0002-virtual-server.jpg" alt="virtual-server" /></li>
<li><a href="http://www.ip138.com/">点击这里</a>查看路由器的对外ip地址（在被连接的电脑上操作）</li>
<li>打开运行，输入“mstsc”并回车（在使用连接的电脑上操作）</li>
<li>输入路由器的对外ip地址并回车，如果设置中服务端口号不是3389，则输入ip后需加上冒号和端口号（在使用连接的电脑上操作）</li>
<li>输入被连接电脑的用户名和密码或只输入密码（在使用连接的电脑上操作）</li>
</ul>


<h4>4.通过广域网使用花生壳实现</h4>

<ul>
<li>免费申请花生壳域名（如：mycount.vicp.cc）</li>
<li>进入路由器管理界面（在被连接的电脑上操作）</li>
<li>选择转发规则，再选择虚拟服务器，添加新条目，输入端口号（默认为3389，如果没做更改则填3389），输入本机的局域网ip地址（在被连接的电脑上操作）</li>
<li>选择动态DNS，输入花生壳的帐号（不用后缀，如：mycount.vicp.cc只需输入mycount）和密码，勾选启用DDNS，点击登录（在被连接的电脑上操作）</li>
<li>打开运行，输入“mstsc”并回车（在使用连接的电脑上操作）</li>
<li>输入花生壳帐号和密码，如果设置中服务端口号不是3389，则输入ip后需加上冒号和端口号（在使用连接的电脑上操作）</li>
<li>输入被连接电脑的用户名和密码或只输入密码（在使用连接的电脑上操作）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[递归算法]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/di-gui-suan-fa/"/>
    <updated>2013-11-27T09:16:52+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/di-gui-suan-fa</id>
    <content type="html"><![CDATA[<h4>1.递归算法</h4>

<ul>
<li>递归过程：一般通过函数或子过程来实现</li>
<li>递归方法：在函数或子过程的内部，直接或者间接地调用自己的算法。每次调用方法时，所有的局部变量和参数都定义在自己的数据空间中，每个参数都根据新的调用而赋予新的初始值。每次在方法终止时，处理都将返回到调用它的方法中</li>
</ul>


<h4>2.实现汉诺塔问题</h4>

<ul>
<li>汉诺塔问题是源于印度一个古老传说的益智玩（查看详细）</li>
<li>代码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MainFun {    
</span><span class='line'>    public static void move(String a, String b, String c, int n) {  
</span><span class='line'>        if(n > 1) {  
</span><span class='line'>            //=================== 在移动第n个圆盘之前，将第n-1个圆盘移到柱子C上  
</span><span class='line'>            move(a, c, b, n-1);  
</span><span class='line'>            //=================== 第n个圆盘上面的滴n-1个圆盘已经移走，此时可以将第n个圆盘移到柱子B  
</span><span class='line'>            System.out.println("圆盘" + String.valueOf(n) + ": 从 " + a + " 移到 " + b);  
</span><span class='line'>            //=================== 第n个圆盘移到目的地柱子A上后，要把第n-1个圆盘移到第n个圆盘上面，即柱子B  
</span><span class='line'>            move(c, b, a, n-1);  
</span><span class='line'>        } else if(n == 1) {  
</span><span class='line'>            System.out.println("圆盘" + String.valueOf(n) + ": 从 " + a + " 移到 " + b);  
</span><span class='line'>        } else {  
</span><span class='line'>            System.out.println("圆盘的个数不能少于1个");  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>    public static void main(String[] args) {  
</span><span class='line'>        String a = "A";  
</span><span class='line'>        String b = "B";  
</span><span class='line'>        String c = "C";  
</span><span class='line'>        move(a, b, c, 5);  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>3.实现穿越迷宫问题</h4>

<ul>
<li>规则说明
-左上角是入口，右下角是出口

<ul>
<li>数字1是通路，数字0是障碍</li>
<li>遇到障碍不能通过，遇到通路且这条路可最终到达出口则将数字1置为7，如果这条路最终是不能到达目的地，则将数字1置为3</li>
</ul>
</li>
<li>代码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Maze {  
</span><span class='line'>    private final int TRIED = 3;  
</span><span class='line'>    private final int PATH = 7;  
</span><span class='line'>    private int grid[][] = {  
</span><span class='line'>            {1,1,1,0,1,1,0,0,0,1,1,1,1},  
</span><span class='line'>            {1,0,1,1,1,0,1,1,1,1,0,0,1},  
</span><span class='line'>            {0,0,0,0,1,0,1,0,1,0,1,0,0},  
</span><span class='line'>            {1,1,1,0,1,1,1,0,1,0,1,1,1},  
</span><span class='line'>            {1,0,1,0,0,0,0,1,1,1,0,0,1},  
</span><span class='line'>            {1,0,1,1,1,1,1,1,0,1,1,1,1},  
</span><span class='line'>            {1,0,0,0,0,0,0,0,0,0,0,0,0},  
</span><span class='line'>            {1,1,1,1,1,1,1,1,1,1,1,1,1}  
</span><span class='line'>    };  
</span><span class='line'>    public boolean traverse (int row, int column) {  
</span><span class='line'>        boolean done = false;  
</span><span class='line'>        if (valid(row, column)) {  
</span><span class='line'>            grid[row][column] = TRIED;  
</span><span class='line'>            if(row == grid.length - 1 && column == grid[0].length -1) {  
</span><span class='line'>                done = true;  
</span><span class='line'>            } else {  
</span><span class='line'>                done = traverse(row + 1, column);  
</span><span class='line'>                if(!done)  
</span><span class='line'>                    done = traverse(row, column + 1);  
</span><span class='line'>                if(!done)  
</span><span class='line'>                    done = traverse(row - 1, column);  
</span><span class='line'>                if(!done)  
</span><span class='line'>                    done = traverse(row, column -1);  
</span><span class='line'>            }  
</span><span class='line'>              
</span><span class='line'>            if(done) {  
</span><span class='line'>                grid[row][column] = PATH;  
</span><span class='line'>            }  
</span><span class='line'>        }  
</span><span class='line'>        return done;  
</span><span class='line'>    }  
</span><span class='line'>    private boolean valid(int row, int column) {  
</span><span class='line'>        boolean result = false;  
</span><span class='line'>        if(row >=0 && row &lt; grid.length && column >= 0 && column &lt; grid[row].length) {  
</span><span class='line'>            if(grid[row][column] == 1) {  
</span><span class='line'>                result = true;  
</span><span class='line'>            }  
</span><span class='line'>        }  
</span><span class='line'>        return result;  
</span><span class='line'>    }  
</span><span class='line'>    public String toString() {  
</span><span class='line'>        String result = "\n";  
</span><span class='line'>        for(int row = 0; row &lt; grid.length; row++) {  
</span><span class='line'>            for(int column = 0; column &lt; grid[row].length; column++) {  
</span><span class='line'>                result += grid[row][column] + "";  
</span><span class='line'>            }  
</span><span class='line'>            result += "\n";  
</span><span class='line'>        }  
</span><span class='line'>        return result;  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>public class MazeSearch {  
</span><span class='line'>    public static void main(String[] args) {  
</span><span class='line'>        Maze labyrinth = new Maze();  
</span><span class='line'>        System.out.println(labyrinth);  
</span><span class='line'>        if(labyrinth.traverse(0, 0)) {  
</span><span class='line'>            System.out.println("成功走出迷宫啦!!!");  
</span><span class='line'>        } else {  
</span><span class='line'>            System.out.println("没法走出迷宫！！");  
</span><span class='line'>        }  
</span><span class='line'>        System.out.println(labyrinth);  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++与Java的参数传递]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/c-plus-plus-yu-java-de-can-shu-chuan-di/"/>
    <updated>2013-11-27T00:33:50+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/c-plus-plus-yu-java-de-can-shu-chuan-di</id>
    <content type="html"><![CDATA[<h4>1.C++的参数传递</h4>

<ul>
<li><strong>值传递</strong></li>
</ul>


<p>如下代码，当代码运行到swap(a, b)时，实际上是将变量a和b的值拷贝给p和q，此时a、b、p、q拥有各自不同的内存，所以a和b的值不会被改变，不能起到交换的作用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int a = 1, b = 2;  
</span><span class='line'>void swap(int p,int q)  
</span><span class='line'>{  
</span><span class='line'>    int temp;  
</span><span class='line'>    temp=p;  
</span><span class='line'>    p=q;  
</span><span class='line'>    q=temp;  
</span><span class='line'>}  
</span><span class='line'>swap(a, b);</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>指针传递（改变指针值）</strong></li>
</ul>


<p>如下代码，当代码运行到swap(a, b)时，实际上是将变量a和b的值拷贝给p和q，此时a、b、p、q拥有各自不同的内存，所以a和b的值不会被改变，不能起到交换的作用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int a = 1, b = 2;  
</span><span class='line'>void swap(int *p,int *q)  
</span><span class='line'>{  
</span><span class='line'>    int temp;  
</span><span class='line'>    temp=*p;  
</span><span class='line'>    *p=*q;  
</span><span class='line'>    *q=temp;  
</span><span class='line'>}  
</span><span class='line'>swap(a, b);</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>指针传递（改变指针）</strong></li>
</ul>


<p>如下代码，<em>p是a的值，p是a的地址，</em>q是b的值，q是b的地址，swap函数体中，形参p和q发生了交换，即<em>p和</em>q的地址发生了交换，但是，这改变的仅仅是使形参p和q所指向的地址，而a和b的地址和值不受任何影响，所以不能起到交换的作用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int a = 1, b = 2;  
</span><span class='line'>void swap(int *p,int *q)  
</span><span class='line'>{  
</span><span class='line'>    int *temp;  
</span><span class='line'>    temp=p;  
</span><span class='line'>    p=q;  
</span><span class='line'>    q=temp;  
</span><span class='line'>}  
</span><span class='line'>swap(a, b);</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>引用传递</strong></li>
</ul>


<p>使用引用传递参数时，对形参的操作等同于对实参的操作，所以最后能起到交换的作用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int a = 1, b = 2;  
</span><span class='line'>void swap(int &p,int &q)  
</span><span class='line'>{  
</span><span class='line'>    int temp;  
</span><span class='line'>    temp=p;  
</span><span class='line'>    p=q;  
</span><span class='line'>    q=temp;  
</span><span class='line'>}  
</span><span class='line'>swap(a, b);</span></code></pre></td></tr></table></div></figure>


<h4>2.Java的参数传递</h4>

<ul>
<li><strong>值传递</strong></li>
</ul>


<p>与C++的值传递一致，将实参的值拷贝给形参，在函数体内对形参的任何操作都不会对实参产生任何影响，不能起到交换的作用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MainFun {  
</span><span class='line'>      
</span><span class='line'>    public static void swap(int p, int q) {  
</span><span class='line'>        int temp = p;  
</span><span class='line'>        p = q;  
</span><span class='line'>        q = temp;  
</span><span class='line'>    }  
</span><span class='line'>  
</span><span class='line'>    public static void main(String[] args) {  
</span><span class='line'>        int a = 1;  
</span><span class='line'>        int b = 2;  
</span><span class='line'>        swap(a, b);  
</span><span class='line'>        System.out.println("a:" + a + "\nb:" + b);  
</span><span class='line'>    }  
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>传对象</strong></li>
</ul>


<p>等同于C++的传引用，操作形参即操作实参，能起到交换的作用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MainFun {  
</span><span class='line'>      
</span><span class='line'>    public static void swap(StringBuffer p, StringBuffer q) {  
</span><span class='line'>        String ppp = p.toString();  
</span><span class='line'>        String qqq = q.toString();  
</span><span class='line'>        p.replace(0, 3, qqq);  
</span><span class='line'>        q.replace(0, 3, ppp);  
</span><span class='line'>    }  
</span><span class='line'>  
</span><span class='line'>    public static void main(String[] args) {  
</span><span class='line'>        StringBuffer a = new StringBuffer("AAA");  
</span><span class='line'>        StringBuffer b = new StringBuffer("BBB");  
</span><span class='line'>        swap(a, b);  
</span><span class='line'>        System.out.println("a:" + a + "\nb:" + b);  
</span><span class='line'>    }  
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>一种特殊情况</strong></li>
</ul>


<p>如果传递的对象是String类声明的，则不能起到交换的作用。因为String的对象赋值后是不能修改的，若对其执行修改操作，其实质是利用一块新的内存来存放改变后的值，原来的内存存放的值并未改变。如下代码，第四行代码等价于String p = new String(p + &ldquo; World&rdquo;)，形参p是引用，其指向仍是“Hello”，所以最后输出结果是“Hello”，没有起到改变str的作用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MainFun {  
</span><span class='line'>      
</span><span class='line'>    public static void swap(String p) {  
</span><span class='line'>        p = p + " World";  
</span><span class='line'>    }  
</span><span class='line'>  
</span><span class='line'>    public static void main(String[] args) {  
</span><span class='line'>        String str = new String("Hello");  
</span><span class='line'>        swap(str);  
</span><span class='line'>        System.out.println(str);  
</span><span class='line'>    }  
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>（注：在修改String对象时会造成内存泄漏，因为修改后原来的内存没有被释放掉，但又没有被利用，Java的垃圾自动回收机制速度较慢，没能立即回收）</p>

<h3>3.参考资料</h3>

<ul>
<li><h4><a href="http://www.cnblogs.com/Romi/archive/2012/08/09/2630014.html">C/C++中函数参数传递详解</a></h4></li>
<li><h4><a href="http://blog.sina.com.cn/s/blog_4b622a8e0100c1bo.html">java参数传递（超经典）</a></h4></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的计算器]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/jian-dan-de-ji-suan-qi/"/>
    <updated>2013-11-27T00:27:19+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/jian-dan-de-ji-suan-qi</id>
    <content type="html"><![CDATA[<h4>刚学Java，做个计算器熟悉一下语法</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.awt.Color;  
</span><span class='line'>import java.awt.Container;  
</span><span class='line'>import java.awt.GridLayout;  
</span><span class='line'>import java.awt.BorderLayout;  
</span><span class='line'>import java.awt.event.ActionEvent;  
</span><span class='line'>import java.awt.event.ActionListener;  
</span><span class='line'>import javax.swing.*;  
</span><span class='line'>  
</span><span class='line'>public class MyCalculator extends JFrame implements ActionListener {  
</span><span class='line'>    JFrame frame;  
</span><span class='line'>    JTextField textField;  
</span><span class='line'>    double result = 0.0; //存储最后一次运算之前的运算结果  
</span><span class='line'>    String sign = "";    //记住本次运算是加减乘除的哪一种  
</span><span class='line'>    boolean afterSign = true; //用于判断按数字前是否按了运算键  
</span><span class='line'>    //====================================== 构造函数，初始化类  
</span><span class='line'>    public MyCalculator() {  
</span><span class='line'>        init();  
</span><span class='line'>    }  
</span><span class='line'>    //====================================== 计算器输入输入区域  
</span><span class='line'>    public JTextField getNorth() {   
</span><span class='line'>        textField = new JTextField();  
</span><span class='line'>        textField.setHorizontalAlignment(JTextField.RIGHT); //靠右显示文本  
</span><span class='line'>        textField.setLayout(new GridLayout());  
</span><span class='line'>        textField.setEditable(false);                      //文本框不可编辑  
</span><span class='line'>        textField.setBackground(Color.white);              //设置文本框底色  
</span><span class='line'>        textField.setText("0");  
</span><span class='line'>        return textField;  
</span><span class='line'>    }  
</span><span class='line'>    //====================================== 数字键、小数点及等号区域  
</span><span class='line'>    public JPanel getCenter() {   
</span><span class='line'>        JPanel numPanel = new JPanel();  
</span><span class='line'>        numPanel.setLayout(new GridLayout(4, 3));  
</span><span class='line'>        String btnStr[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", ".", "=" };  
</span><span class='line'>  
</span><span class='line'>        JButton btn[] = new JButton[12];  
</span><span class='line'>        for (int i = 0; i &lt; 12; i++) {   
</span><span class='line'>            btn[i] = new JButton(btnStr[i]);  
</span><span class='line'>            btn[i].addActionListener(this); //为该按钮添加监听  
</span><span class='line'>            numPanel.add(btn[i]);  
</span><span class='line'>        }  
</span><span class='line'>        return numPanel;  
</span><span class='line'>    }  
</span><span class='line'>    //====================================== 加减乘除按键区域  
</span><span class='line'>    public JPanel getWest() {   
</span><span class='line'>        JPanel symPanel = new JPanel();  
</span><span class='line'>        symPanel.setLayout(new GridLayout(4, 1)); //使用layout布局，4行1列  
</span><span class='line'>        String btnStr[] = { "+", "-", "*", "/" };  
</span><span class='line'>  
</span><span class='line'>        JButton btn[] = new JButton[4];  
</span><span class='line'>        for(int i = 0; i &lt; 4; i++) {   
</span><span class='line'>            btn[i] = new JButton(btnStr[i]);  
</span><span class='line'>            btn[i].addActionListener(this);  
</span><span class='line'>            symPanel.add(btn[i]);  
</span><span class='line'>        }  
</span><span class='line'>        return symPanel;  
</span><span class='line'>    }  
</span><span class='line'>    //====================================== 清除输入输出区域按键  
</span><span class='line'>    public JButton getSouth() {   
</span><span class='line'>        JButton btn = new JButton("AC");  
</span><span class='line'>        btn.addActionListener(this);  
</span><span class='line'>        return btn;  
</span><span class='line'>    }  
</span><span class='line'>    public void init() {   
</span><span class='line'>        frame = new JFrame();  
</span><span class='line'>        Container con = frame.getContentPane();  
</span><span class='line'>        //con.setLayout(new BorderLayout(20, 20));  //布局的5个区域之间的垂直与水平间距  
</span><span class='line'>        con.add(getNorth(), BorderLayout.NORTH);  
</span><span class='line'>        con.add(getCenter(), BorderLayout.CENTER);  
</span><span class='line'>        con.add(getWest(), BorderLayout.EAST);  
</span><span class='line'>        con.add(getSouth(), BorderLayout.SOUTH);  
</span><span class='line'>        frame.setSize(250, 200);   //设置窗口长度、宽度  
</span><span class='line'>        frame.setResizable(false); //窗口大小不可改变  
</span><span class='line'>        frame.setVisible(true);  
</span><span class='line'>    }  
</span><span class='line'>    //======================================= 根据按钮符号进行相应的四则运算  
</span><span class='line'>    public double operation(double previous, double later, String str) {   
</span><span class='line'>        switch(str) {   
</span><span class='line'>            case "+":  
</span><span class='line'>                previous = previous + later;  
</span><span class='line'>                break;  
</span><span class='line'>            case "-":  
</span><span class='line'>                previous = previous - later;  
</span><span class='line'>                break;  
</span><span class='line'>            case "*":  
</span><span class='line'>                previous = previous * later;  
</span><span class='line'>                break;  
</span><span class='line'>            case "/":  
</span><span class='line'>                previous = previous / later;  
</span><span class='line'>        }  
</span><span class='line'>        return previous;  
</span><span class='line'>    }  
</span><span class='line'>    //======================================= 在按下运算符或等号时需要进行运算  
</span><span class='line'>    public void getResult() {   
</span><span class='line'>        double later = Double.parseDouble(this.textField.getText());  
</span><span class='line'>        this.result = operation(this.result, later, this.sign);  
</span><span class='line'>        String r = new Double(this.result).toString();  
</span><span class='line'>        r = r.endsWith("0") ? r.split("\\.")[0] : r;  
</span><span class='line'>        this.textField.setText(r);  
</span><span class='line'>    }  
</span><span class='line'>    //======================================= 在做四则运算前的需要的判断  
</span><span class='line'>    public void beforeGetResult(String str) {   
</span><span class='line'>        if(!this.afterSign) {   
</span><span class='line'>            this.sign = str;  
</span><span class='line'>        } else {   
</span><span class='line'>            if(this.sign.equals("")) {   
</span><span class='line'>                this.result = Double.parseDouble(this.textField.getText());  
</span><span class='line'>                this.textField.setText(this.textField.getText());  
</span><span class='line'>            } else {   
</span><span class='line'>                getResult();  
</span><span class='line'>            }  
</span><span class='line'>            this.sign = str;  
</span><span class='line'>            this.afterSign = false;  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>    //======================================= 点击数字按钮事件  
</span><span class='line'>    public void clickNum(String str) {   
</span><span class='line'>        if(this.afterSign) {   
</span><span class='line'>            if(this.textField.getText().equals("0"))  
</span><span class='line'>                this.textField.setText(str);  
</span><span class='line'>            else  
</span><span class='line'>                this.textField.setText(this.textField.getText() + str);  
</span><span class='line'>        } else {   
</span><span class='line'>            this.textField.setText(str);  
</span><span class='line'>            this.afterSign = true;  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>    //======================================= 所有按钮的监听事件，是实现接口JActionListener的方法  
</span><span class='line'>    public void actionPerformed(ActionEvent e) {  
</span><span class='line'>        String str = e.getActionCommand();  
</span><span class='line'>        switch (str) {   
</span><span class='line'>            case "+":  
</span><span class='line'>            case "-":  
</span><span class='line'>            case "*":  
</span><span class='line'>            case "/":  
</span><span class='line'>                this.beforeGetResult(str);  
</span><span class='line'>                break;  
</span><span class='line'>            case ".":  
</span><span class='line'>                if(this.textField.getText().contains(".")) {   
</span><span class='line'>                    JOptionPane.showMessageDialog(null, "哥，别点啦，已经有小数点了！");  
</span><span class='line'>                } else {   
</span><span class='line'>                    this.textField.setText(this.textField.getText() + str);  
</span><span class='line'>                };  
</span><span class='line'>                break;  
</span><span class='line'>            case "=":  
</span><span class='line'>                if(this.afterSign) {   
</span><span class='line'>                    getResult();  
</span><span class='line'>                    this.afterSign = false;  
</span><span class='line'>                }  
</span><span class='line'>                break;  
</span><span class='line'>            case "AC":  
</span><span class='line'>                this.textField.setText("0");  
</span><span class='line'>                this.afterSign = false;  
</span><span class='line'>                this.sign = "";  
</span><span class='line'>                this.result = 0.0;  
</span><span class='line'>                break;  
</span><span class='line'>            default: //剩下的都是数字的按钮  
</span><span class='line'>                this.clickNum(str);  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>    public static void main(String args[]) {   
</span><span class='line'>        new MyCalculator();  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初步认识Java]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/26/chu-bu-ren-shi-java/"/>
    <updated>2013-11-26T23:59:55+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/26/chu-bu-ren-shi-java</id>
    <content type="html"><![CDATA[<h4>1.JVM</h4>

<ul>
<li>Java Virtual Machine，Java虚拟机</li>
<li>client适用于启用GUI界面的交互应用，启动快，运行慢，一般用于开发环境</li>
<li>server适用于运行后台服务器程序，启动慢，运行快，一般用于生产环境</li>
</ul>


<h4>2.JDK</h4>

<ul>
<li>Java Development Kit，Java开发工具包，其中包含了各种类库和工具，还有一个JRE</li>
</ul>


<h4>3.JRE</h4>

<ul>
<li>Java Runtime Environment，Java运行环境，运行Java程序只要有这个JRE就足够了</li>
<li>JRE中包含了Java运行所必须的类库等文件，还有虚拟机（jre/bin/client/jvm.dll）</li>
<li>JDK中也有一个JRE，这个JRE中有两个虚拟机jre/bin/client/jvm.dll和jre/bin/server/jvm.dll</li>
</ul>


<h4>4.Java版本</h4>

<ul>
<li>ava SE：Java Standard Edition 曾称 J2SE，Java标准版或Java标准平台，提供标准的JDK。利用该平台可以开发Java桌面应用程序和低端服务器应用程序，也可以开发Java Applet程序</li>
<li>Java EE：Java enterpsise Edtion 曾称J2EE，Java企业版或Java企业平台。利用该平台可以构建企业级的服务应用，Java EE平台包含了Java SE平台，并增加了附加类库，以便支持目录管理、交易管理和企业级消息处理等功能</li>
<li>Java ME：Java Micro Edition 曾称J2ME，Java微型版或Java小型平台。该平台是一种很小的Java运行环境，用于嵌入式的消费产品中</li>
</ul>


<h4>5.下载</h4>

<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">官网下载</a></li>
<li>32位 windows 7下载windows x86这一项</li>
<li>双击安装，期间选择JDK和JRE的安装位置</li>
</ul>


<h4>6.配置环境变量</h4>

<ul>
<li>Path：选择JDK目录下的bin（如：D:\Java\jdk7\bin）</li>
<li>ClassPath：选择Java类库的rt.jar包，为了加载该包下所有的类，应该在其后加上&#8221;.;&ldquo;（如：D:\Java\jre7\lib\rt.jar;.;）</li>
</ul>


<h4>7.一个简单的Java应用程序</h4>

<ul>
<li>创建文件HelloWorld.java</li>
<li>使用记事本编辑器输入如下代码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class HelloWorld {  
</span><span class='line'>    public static void main(String[] args) {  
</span><span class='line'>        System.out.println("Hello World!!!");  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>打开命令提示符，切换到HelloWorld.java文件所在目录</li>
<li>输入javac HelloWorld.java 进行编译</li>
<li>再输入 java HelloWorld 运行</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终于把博客移到了win7]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/26/zhong-yu-ba-bo-ke-yi-dao-le-win7/"/>
    <updated>2013-11-26T15:31:55+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/26/zhong-yu-ba-bo-ke-yi-dao-le-win7</id>
    <content type="html"><![CDATA[<p>在Ubuntu中创建Octopress博客一切顺利，但以后总有需要在Windows下写博客的时候，所以必须在Windows下配置好写博客的环境。在这里可费了我不少的时间啊，问题其实只有一个，在Windows下创建的文本文件是ANSI格式，而Octopress博客只能识别utf-8无BOM格式的文本文件。一开始我不知道是这个原因，又被网上几篇文章给误导了，先是跑去将文本转换成utf-8格式，结果还是出错，后来去虚拟机装Ubuntu系统，但在虚拟机中配置环境时又出现了很多奇葩的问题，其中有几个一直都解决不了，最后尝试在Windows下对博客进行所有的操作，但生成的markdown格式的博客文本文件删掉，使用在Ubuntu中创建的文件，结果成功了。因此，我便确定问题仅仅是文件编码格式不同而已，问题变简单了，找一个文件格式转换软件，只要写好博文后将文件转换为utf-8无BOM格式，便可以了。</p>

<p>坑爹的，先把在Windows下配置的步骤记下来，再把所用到的软件安装包（<a href="http://pan.baidu.com/s/16AHOW">点击下载</a>）备份下，以后不用浪费时间。</p>

<h4>1. 安装Git</h4>

<p>安装包<code>Git-1.8.3-preview20130601.exe</code></p>

<h4>2. 安装Ruby</h4>

<p>安装包<code>rubyinstaller-1.9.3-p484.exe</code>，默认安装位置<code>C:\Ruby193</code>，配置环境变量<code>Path：C:\Ruby193\bin</code></p>

<h4>3.安装Ruby Develop Kit</h4>

<p>安装包<code>DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</code>，实际只是一个解压过程，解压到<code>C:\RubyDEvKit\</code></p>

<h4>4. 在命令提示符中运行以下指令</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd C:\RubyDEvKit
</span><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install</span></code></pre></td></tr></table></div></figure>


<h4>5. 克隆自己的Octopress项目</h4>

<p>打开git bash，输入以下指令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone -b source https://github.com/Jing5022/jing5022.github.com.git myblog
</span><span class='line'>cd myblog
</span><span class='line'>git clone https://github.com/Jing5022/jing5022.github.com.git _deploy</span></code></pre></td></tr></table></div></figure>


<h4>6. 安装Octopress</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd myblog
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h4>7. 解决中文问题</h4>

<p>Windows默认字符编码为gbk，Octopress只支持utf-8无BOM，输入以下指令解决该问题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set LC_ALL=zh_CN.UTF-8
</span><span class='line'>set LANG=zh_CN.UTF-8</span></code></pre></td></tr></table></div></figure>


<p>找到并打开这个文件<code>C:\Ruby193\lib\ruby\gems\1.9.1\gems\jekyll-0.12.0\lib\jekyll\convertible.rb</code>，将下面第一句代码替换成第二行代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.content = File.read(file.join(base, name))
</span><span class='line'>self.content = File.read(File.join(base, name), :encoding => "utf-8")</span></code></pre></td></tr></table></div></figure>


<p>在Windows中html文件不能使用中文，否则<code>rake generate</code>出错，目前我还不知道是什么原因，在windows下的解决方法是在目录C:\Program Files (x86)\Git\etc下找到profile文件，在其最后添加一下两行代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export LC_ALL=en_US.UTF-8
</span><span class='line'>export LANG=en_US.UTF-8</span></code></pre></td></tr></table></div></figure>


<h4>8. 测试部署是否成功</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器输入<code>localhost:4000</code>，感受自己的本地博客吧</p>

<h4>9. 安装文本文件格式转换器</h4>

<p>安装包<code>npp.6.5.1.Installer.exe</code>，安装后打开，在菜单栏上的选择格式再选择<code>转为UTF-8无BOM编码格式</code>。Notepad++是一种编辑器，功能很强大，这里我只用到它对文本文件格式的转换功能，将其格式转为 UTF-8无BOM 编码格式，而该编辑器的其他功能以后慢慢发现</p>

<p>接下来便可以对博客的进行管理操作了，但在编写博文后需要用必须使用Notepad++对文件进行格式转换。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建octopress博客的过程]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/25/chuang-jian-octopressbo-ke-de-guo-cheng/"/>
    <updated>2013-11-25T00:19:34+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/25/chuang-jian-octopressbo-ke-de-guo-cheng</id>
    <content type="html"><![CDATA[<p>今天心血来潮，想在github上做个博客出来，以后就在这上面写博客，感觉会比用新浪或网易等博客高级很多，而且又不需要购买域名，爽爆啦^_^
不过在创建博客期间遇到了一些问题，创建过程不顺利，现在趁刚做好，写下步骤，免得以后又要花时间去研究。</p>

<h4>1.安装Ruby 1.9.3-p374</h4>

<h4>2.安装Octopress</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git myblog
</span><span class='line'>cd myblog
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h4>3.创建Repository</h4>

<p>该Repository的命名需要遵守这样的约定，username.github.com，所以我创建的代码仓库名为jing5022.github.com，在创建时不可勾选 Initialize this repository with a README 这个选项，否则部署会失败，其中原因待考证</p>

<h4>4.部署</h4>

<p>执行以下指令进行部署，期间要求输入url，看网上的教程，其格式有两种，而我在这里因为格式的问题导致后面发布不到github上去，最后这样写便可顺利发布：<a href="https://github.com/Jing5022/jing5022.github.com.git">https://github.com/Jing5022/jing5022.github.com.git</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<h4>5.生成静态网页</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<h4>6.发布到github</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<h4>7.创建source分支，管理文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "backup files in source"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h4>8.创建博文</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>该命令将会在<code>source/_posts</code>目录下生成一个名为<code>YYYY-MM-DD-post-title.markdown</code>的文件,根据markdown的语法编辑该文件，即是在书写文章了。写好博文后需要再次生成静态网页，可输入以下指令后在本地的4000端口进行预览，最后还要发布到github上。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<h4>9.克隆远程代码继续管理博客</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/Jing5022/jing5022.github.com.git
</span><span class='line'>cd jing5022.github.com
</span><span class='line'>git checkout source
</span><span class='line'>git clone https://github.com/Jing5022/jing5022.github.com.git _deploy</span></code></pre></td></tr></table></div></figure>


<h4>10.更换主题</h4>

<p><a href="https://github.com/imathis/octopress/wiki/Octopress-Sites">多种主题链接</a>
如更换一个名为solarized的主题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd myblog
</span><span class='line'>git clone http://github.com/erikzaadi/solarized-octopress-theme .themes/solarized
</span><span class='line'>rake install["solarized"]
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>以下是我觉得不错的主题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/lucaslew/whitespace.git .themes/whitespace
</span><span class='line'>git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
</span><span class='line'>git clone git://github.com/amelandri/darkstripes.git .themes/darkstripes</span></code></pre></td></tr></table></div></figure>


<p>主题的背景及代码块的背景的色调可通过编辑sass/custom/_colors.scss文件来修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sol : light; //博客背景色调
</span><span class='line'>$solarized : dark; //代码块背景色调</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[致我的博客]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/25/zhi-wo-de-bo-ke/"/>
    <updated>2013-11-25T00:00:49+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/25/zhi-wo-de-bo-ke</id>
    <content type="html"><![CDATA[<p>这段时间看了一些网友的博客，我觉得他们都很有思想，博客应该就是他们表达思想的一种载体。写博客，或许可以让人静下心来并从中得到启发，或许它就是人类做总结的一种方式，又或许它就是一种修养。看了网友们的博客，我也很想通过博客来记录自己的一些经历、分享自己的经验、表达自己的一些情感或发泄一些情绪，如果可以，我希望可以给网友们带来一点点正能量。</p>

<p>之前还在学习编程技术的时候，经常上博客园、CSDN、ITeye等技术博客网站，也在这几家博客网站注册了账号并都写了几篇技术文章，但最终都没能坚持写下去。看到许多网友写了好多年的博客，博文数量都好几百，真心佩服。不知为什么，我这几天很有动力去搭建自己地Octopress博客，可能是这种独立博客能给人一种安静的感觉，而这正是我需要的。在Github上写博客也不是一件轻松的事，虽然有一点编程的基础，但毕竟不是技术控。在Ubuntu中搭建Octopress博客，然后在win7上搭建写博客的环境，再修改博客主题，这都花费了我挺多的时间，目前还有很多功能没有实现，要完成这些功能应该还需要学习很多网页这类的知识，慢慢来吧。</p>

<p>一直以来，自己做事经常是三分热度，之前写技术博客也是如此。前段时间，在一位师兄的博客中谈到<a href="http://www.cnblogs.com/me-sa/">这个博客</a>的作者在<a href="http://www.douban.com/group/topic/23688164/">豆瓣上</a>发表了自己要写1000篇以上的文章决心，还有<a href="http://colors4.us/blog/2012/09/05/octopress-theme-adjusting/">这篇博客</a>的作者与其夫人也表达了他们可以在这个博客上写上60年文章的信心，目前已经写了有10年了，看后我真的很震撼。我认为写博客是一件很有意义的事，我要向这些前辈们学习，慢慢积累，慢慢沉淀。</p>
]]></content>
  </entry>
  
</feed>
