<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technology | ChenJing]]></title>
  <link href="http://Jing5022.github.io/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://Jing5022.github.io/"/>
  <updated>2014-10-09T15:54:01+08:00</updated>
  <id>http://Jing5022.github.io/</id>
  <author>
    <name><![CDATA[Marlon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[刷机经历]]></title>
    <link href="http://Jing5022.github.io/blog/2014/10/07/shua-ji-jing-li/"/>
    <updated>2014-10-07T15:24:01+08:00</updated>
    <id>http://Jing5022.github.io/blog/2014/10/07/shua-ji-jing-li</id>
    <content type="html"><![CDATA[<p>说到刷机，截止至目前我只刷过两次，说不上经验丰富，只是现在已经厌倦了各种类似装系统的事情，特别是因为不熟悉还需要去研究的，所以记下自己刷机的一些步骤，以后需要刷机的时候可以直接参照着做，快速解决问题。第一次刷机后手机仍然不能用，一直以为刷机失败了，后来才知道是手机硬件坏了，作为一个刷机新手，真的很难判断是自己的操作错误还是ROM包的问题，亦或是硬件出了问题。第二次刷机是朋友的手机，和我的手机是同个型号的，这次刷机成功了，其实跟上次是完全一样的操作，只是这次的没有出现其他的问题，所以买手机还是不要贪便宜，买好一点的，刷机也简单，不会出现太多其他的问题干扰思路。下面是我的刷机步骤（手机型号：神舟e50 T1）：</p>

<h4>1.在手机上安装的软件</h4>

<p>手机需先安装root软件并获取root权限，然后安装移动叔叔，打开并得获取root权限，选择Recovery更新，找到这个<a href="http://yunpan.cn/cg2Ps6J2t7nJ9">recovery.img</a>（获取码：76f2），更新成功后重启即可。Recovery模式类似PE系统，移动叔叔刷入这个系统操作很简单。</p>

<h4>2.Recovery模式中的操作</h4>

<p>从移动叔叔的操作中重启后会自动进入Recovery模式，也可以在关机状态下先按音量“+”键再按住电源键进入。选择简体中文&mdash;擦除和格式化分区&mdash;擦除cache/恢复出厂设置&mdash;返回&mdash;从SD卡安装ROM包<a href="http://www.miui.com/download-214.html">update.zip</a>（该ROM包要提前放置于手机内存中），安装完成后返回主页，进入电源选项进行重启即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/S模式与B/S模式]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/c-slash-s-and-b-slash-s/"/>
    <updated>2013-11-27T18:19:26+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/c-slash-s-and-b-slash-s</id>
    <content type="html"><![CDATA[<h4>1.C/S模式</h4>

<p>C/S（Client/Server，客户机/服务器）方式的网络计算模式，其工作分别由服务器和客户机完成。服务器负责管理数据库的访问，为多个客户程序管理数据，并对数据库进行检索和排序，此外还要对客户机/服务器网络结构中的数据库安全层加锁，进行保护。客户机负责与用户的交互，收集用户信息，通过网络向服务器请求对诸多数据库、电子表格或文档等信息的处理工作。所以，在C/S模式中，资源是不对等的，是一种“胖客户机”，“瘦服务器”的结构。</p>

<h4>2.B/S模式</h4>

<p>B/S（Browser/Server，浏览器/服务器）方式的网络结构，在客户端统一采用如Netscape和IE一类的浏览器，通过Web浏览器的向服务器提出请求，由Web服务器对数据库进行操作，并将结果传回客户端。在B/S体系结构系统中，用户通过浏览器向分布在网络上的许多服务器发出请求，服务器对浏览器请求进行处理，将用户所需的信息返回到浏览器。B/S结构简化了客户机的工作，客户机只需配置少量的客户端软件即可。但服务器将担负更多的工作，对数据库的访问和应用程序的执行都将在服务器上完成。即当浏览器发出请求后，其数据请求、加工、返回结果以及动态网页生成等工作全部由Web服务器完成。</p>

<h4>3.C/S模式与B/S模式的比较</h4>

<ul>
<li>开发和维护成本

<ul>
<li>C/S开发和维护成本较高，对不同客户端需要开发不同的程序，且应用程序的安装、修改和升级均需要在所有的客户机上进行</li>
<li>B/S模式中，客户端只需有通用的浏览器，所有的维护与升级工作都是在服务器上执行，无须对客户机进行任何改变，因而大大降低了开发和维护的成本</li>
</ul>
</li>
<li>客户端负载

<ul>
<li>C/S的客户端具有显示和处理数据的功能，负载重。随着应用系统的功能越来越复杂，客户端的应用程序也变得越来越庞大</li>
<li>B/S模式的客户端把事务处理逻辑部分分给了服务器，客户端只需进行显示即可</li>
</ul>
</li>
<li>可移植性
-C/S模式移植困难，因为用不同开发工具开发的应用程序，一般情况下互不兼容，难以移植到其他平台上运行
-B/S模式在客户端安装的是通用的浏览器，不存在移植性问题</li>
<li>用户界面

<ul>
<li>C/S模式的用户界面是由客户端安装的软件决定的，因此用户界面各不相同</li>
<li>B/S通过通用的浏览器访问应用程序，其浏览器的界面统一，使用时类似于浏览网页</li>
</ul>
</li>
<li>安全性

<ul>
<li>C/S模式适用于专人使用的系统，可以通过严格的管理派发软件，适用于安全性要求较高的专用应用软件</li>
<li>B/S适用于交互性要求较多，使用人数较多，安全性要求不是很高的应用环境</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的Ubuntu系统配置（13.04版本）]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/my-ubuntu-configuration/"/>
    <updated>2013-11-27T16:49:34+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/my-ubuntu-configuration</id>
    <content type="html"><![CDATA[<h4>1.更新源</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>2.安装软件</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install guake
</span><span class='line'>sudo apt-get install gnome-do
</span><span class='line'>sudo apt-get install openssh-client
</span><span class='line'>sudo apt-get install openssh-server
</span><span class='line'>sudo apt-get install git-core
</span><span class='line'>sudo apt-get install tig
</span><span class='line'>sudo apt-get install mysql-server
</span><span class='line'>sudo apt-get install mysql-client
</span><span class='line'>sudo apt-get install curl
</span><span class='line'>// 安装rvm，装后vim ~/.bashrc，加入[[ -s &ldquo;$HOME/.rvm/scripts/rvm&rdquo; ]] &amp;&amp; source &ldquo;$HOME/.rvm/scripts/rvm&rdquo;
</span><span class='line'>\curl -L &lt;a href="https://get.rvm.io">https://get.rvm.io&lt;/a> | bash -s stable
</span><span class='line'>rvm install ruby 1.9.3
</span><span class='line'>rvm install ruby 2.0.0
</span><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo apt-get install ack-grep
</span><span class='line'>// 安装右键打开终端脚本，安装完执行killall nautilus
</span><span class='line'>sudo apt-get install nautilus-open-terminal</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>3.Backspace按键失效</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gvim  ~/.config/nautilus/accels&lt;br/>
</span><span class='line'>// 在文件最下方添加下面这行代码&lt;br/>
</span><span class='line'>(gtk_accel_path &ldquo;&lt;Actions>/ShellActions/Up&rdquo; &ldquo;BackSpace&rdquo;)
</span><span class='line'> // 重启Nautilus
</span><span class='line'>nautilus -q</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>4.Guake Terminal GUI 显示错误</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /usr/share/guake/guake.glade&lt;br/>
</span><span class='line'>&lt;property name="gravity">north&lt;/property>
</span><span class='line'>// 将static改为north</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>5.安装搜狗拼音输入法</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:fcitx-team/nightly&lt;br/>
</span><span class='line'>sudo apt-get update&lt;br/>
</span><span class='line'>sudo apt-get install fcitx-sogoupinyin&lt;br/>
</span><span class='line'>im-switch -s fcitx -z default</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>6.设置关机快捷键</h4>

<ul>
<li>系统设置&mdash;键盘&mdash;快捷键&mdash;自定义快捷键&mdash;“+”</li>
<li>在命令输入：<code>/usr/lib/indicator-session/gtk-logout-helper -s</code></li>
</ul>


<h4>7.自动挂载磁盘</h4>

<ul>
<li>查看本地磁盘信息: <code>ls -l /dev/disk/by-uuid</code>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 2C10CFFB10CFCA52 &ndash;> ../../sda6
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 3A88EA3B88E9F573 &ndash;> ../../sda1
</span><span class='line'>lrwxrwxrwx 1 root root 11 May 24 14:14 5326af25-5d9d-43f3-9db2-34c57053ddcb &ndash;> ../../sda10
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 7C70FFB270FF716E &ndash;> ../../sda7
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 a177ed6b-9d64-4b74-b610-23f51ce325b9 &ndash;> ../../sda9
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 D8E42E3BE42E1BEE &ndash;> ../../sda8
</span><span class='line'>lrwxrwxrwx 1 root root 10 May 24 14:14 F6E499FDE499BFF3 &ndash;> ../../sda5</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>打开配置文件: <code>sudo gvim /etc/fstab</code>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UUID=5a0bd731-6b01-4cbc-b088-b0cb70ca463c /               ext4    errors=remount-ro 0       1
</span><span class='line'>UUID=a177ed6b-9d64-4b74-b610-23f51ce325b9 none        swap      sw                           0       0</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>添加要挂载的磁盘，如本人配置添加以下信息
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UUID=F6E499FDE499BFF3          /media/Softwares     ntfs    utf8,umask=007,gid=46       0         1
</span><span class='line'>UUID=2C10CFFB10CFCA52        /media/Daily               ntfs    utf8,umask=007,gid=46       0         1
</span><span class='line'>UUID=7C70FFB270FF716E          /media/Learning        ntfs    utf8,umask=007,gid=46       0         1
</span><span class='line'>UUID=D8E42E3BE42E1BEE          /media/Others            ntfs    utf8,umask=007,gid=46       0         1</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<h4>8.SSH无密码登录</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen  // 生成密钥，直接回车至结束&lt;br/>
</span><span class='line'>ssh-copy-id user@id  // 复制SSH密钥到目标主机&lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>9.设置右键管理员打开文件夹</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:noobslab/apps&lt;br/>
</span><span class='line'>sudo apt-get update&lt;br/>
</span><span class='line'>sudo apt-get install open-as-administrator&lt;br/>
</span><span class='line'>nautilus -q&lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div>
* 右击一个文件夹
* 选择脚本(s)
* 选择<code>open-as-administrator.sh</code>
* 输入密码便以管理员身份进入目录</p>

<h4>10. 安装清道夫</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:tualatrix/ppa&lt;br/>
</span><span class='line'>sudo apt-get update&lt;br/>
</span><span class='line'>sudo apt-get install ubuntu-tweak</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>11.备份系统</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su
</span><span class='line'>cd
</span><span class='line'>tar cvpzf backup.tgz / &mdash;exclude=/proc &mdash;exclude=/lost+found &mdash;exclude=/backup.tgz &mdash;exclude=/mnt &mdash;exclude=/sys &mdash;exclude=/media</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>12.还原系统</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su
</span><span class='line'>cd
</span><span class='line'>tar xvpfz backup.tgz -C /</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/pai-xu-suan-fa/"/>
    <updated>2013-11-27T14:31:02+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/pai-xu-suan-fa</id>
    <content type="html"><![CDATA[<h4>1.选择排序</h4>

<ul>
<li>说明：遍历所有元素，将小的元素放到第一个位置上，再遍历除第一个位置外所有元素，将最小元素放到第二个位置，以此类推至完成排序</li>
<li>代码：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void selectionSort(int ary[]) {&lt;br/>
</span><span class='line'>  int min;&lt;br/>
</span><span class='line'>  int temp;&lt;br/>
</span><span class='line'>  for(int i = 0; i &lt; ary.length &ndash; 1; i++) {&lt;br/>
</span><span class='line'>      min = i;&lt;br/>
</span><span class='line'>      for(int j = i + 1; j &lt; ary.length; j++) {&lt;br/>
</span><span class='line'>          if(ary[j] &lt; ary[min]) {&lt;br/>
</span><span class='line'>              min = j;&lt;br/>
</span><span class='line'>          }&lt;br/>
</span><span class='line'>      }&lt;br/>
</span><span class='line'>      temp = ary[min];&lt;br/>
</span><span class='line'>      ary[min] = ary[i];&lt;br/>
</span><span class='line'>      ary[i] = temp;&lt;br/>
</span><span class='line'>  }&lt;br/>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>示意图：</li>
</ul>


<p><img src="/images/mypictures/0003-xuan-ze-pai-xu.gif" alt="xuanze" /></p>

<h4>2.插入排序</h4>

<ul>
<li>说明：将第一个元素作为第一部分，后面所有元素作为第二部分，逐次从第二部分抽出第一个插入到第一部分，使第一部分有序，第二部分抽完即完成排序</li>
<li>代码：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void insertSort(int ary[]) {&lt;br/>
</span><span class='line'>  for(int i=1; i&lt;ary.length; i++) {&lt;br/>
</span><span class='line'>      int temp = ary[i];&lt;br/>
</span><span class='line'>      int j = i;&lt;br/>
</span><span class='line'>      if(ary[j-1] > ary[i]){&lt;br/>
</span><span class='line'>          while(j >= 1 &amp;&amp; ary[j-1] > temp) {&lt;br/>
</span><span class='line'>              ary[j] = ary[j-1];&lt;br/>
</span><span class='line'>              j&mdash;;&lt;br/>
</span><span class='line'>          }&lt;br/>
</span><span class='line'>          ary[j] = temp;&lt;br/>
</span><span class='line'>      }&lt;br/>
</span><span class='line'>  }&lt;br/>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>示意图：</li>
</ul>


<p><img src="/images/mypictures/0004.gif" alt="charu" /></p>

<h4>3.冒泡排序</h4>

<ul>
<li>说明：从左到右，将所有元素两两进行比较，通过交换位置使更大的元素放在右边，第一遍后最大的元素到了最右边，第二遍是第二大的放在倒数第二个位置</li>
<li>代码：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void bubbleSort(int ary[]) {&lt;br/>
</span><span class='line'>  for(int i = ary.length -1; i >= 0; i&mdash;) {&lt;br/>
</span><span class='line'>      for(int j = 0; j &lt;= i &ndash; 1; j++) {&lt;br/>
</span><span class='line'>          if(ary[j] > ary[j+1]) {&lt;br/>
</span><span class='line'>              int temp = ary[j];&lt;br/>
</span><span class='line'>              ary[j] = ary[j+1];&lt;br/>
</span><span class='line'>              ary[j+1] = temp;&lt;br/>
</span><span class='line'>          }&lt;br/>
</span><span class='line'>      }&lt;br/>
</span><span class='line'>  }&lt;br/>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>示意图：</li>
</ul>


<p><img src="/images/mypictures/0005.gif" alt="maopao" /></p>

<h4>4.快速排序</h4>

<ul>
<li>说明：从右向左搜索比第一个元素小的元素，找到则与第一个元素交换，再从左向右搜索比最后一个元素大的元素，找到也交换，直到从两边搜索到相遇。此时以相遇点为分界线将元素分为两部分，使用递归对这两部分分别进行如前面一样的操作</li>
<li>代码：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void quickSort(int a[], int start, int end){&lt;br/>
</span><span class='line'>  int i,j;&lt;br/>
</span><span class='line'>  i = start;&lt;br/>
</span><span class='line'>  j = end;&lt;br/>
</span><span class='line'>  if((a==null)||(a.length==0))&lt;br/>
</span><span class='line'>      return;&lt;br/>
</span><span class='line'>  while(i&lt;j){&lt;br/>
</span><span class='line'>      while(i&lt;j&amp;&amp;a[i]&lt;=a[j]) {     //以数组start下标的数据为key，右侧扫描&lt;br/>
</span><span class='line'>          j&mdash;;&lt;br/>
</span><span class='line'>      }&lt;br/>
</span><span class='line'>      if(i&lt;j){                   //右侧扫描，找出第一个比key小的，交换位置&lt;br/>
</span><span class='line'>          int temp = a[i];&lt;br/>
</span><span class='line'>          a[i] = a[j];&lt;br/>
</span><span class='line'>          a[j] = temp;&lt;br/>
</span><span class='line'>      }&lt;br/>
</span><span class='line'>      while(i&lt;j&amp;&amp;a[i]&lt;a[j]){    //左侧扫描（此时a[j]中存储着key值）&lt;br/>
</span><span class='line'>          i++;&lt;br/>
</span><span class='line'>      }&lt;br/>
</span><span class='line'>      if(i&lt;j){                 //找出第一个比key大的，交换位置&lt;br/>
</span><span class='line'>          int temp = a[i];&lt;br/>
</span><span class='line'>          a[i] = a[j];&lt;br/>
</span><span class='line'>          a[j] = temp;&lt;br/>
</span><span class='line'>      }&lt;br/>
</span><span class='line'>  }&lt;br/>
</span><span class='line'>  if(i-start>1){&lt;br/>
</span><span class='line'>      //递归调用，把key前面的完成排序&lt;br/>
</span><span class='line'>      quickSort(a,start,i-1);&lt;br/>
</span><span class='line'>  }&lt;br/>
</span><span class='line'>  if(end-j>1){&lt;br/>
</span><span class='line'>      quickSort(a,j+1,end);    //递归调用，把key后面的完成排序&lt;br/>
</span><span class='line'>  }&lt;br/>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>示意图：</li>
</ul>


<p><img src="/images/mypictures/0006.gif" alt="kuaishu" /></p>

<h4>5.归并排序</h4>

<ul>
<li>说明：写一个方法将两个有序的数组合并成一个新的有序数组，使用递归将待排序数组分组（每组只有一个元素），再使用递归运用前面提到的方法各组两两合并</li>
<li><p>代码：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void mergearray(int a[], int first, int mid, int last, int temp[]) {  &lt;br/>
</span><span class='line'>  int i = first, j = mid + 1;  &lt;br/>
</span><span class='line'>  int m = mid, n = last;  &lt;br/>
</span><span class='line'>  int k = 0;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  while (i &lt;= m &amp;&amp; j &lt;= n) {  &lt;br/>
</span><span class='line'>      if (a[i] &lt;= a[j])  &lt;br/>
</span><span class='line'>          temp[k++] = a[i++];  &lt;br/>
</span><span class='line'>      else  &lt;br/>
</span><span class='line'>          temp[k++] = a[j++];  &lt;br/>
</span><span class='line'>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  while (i &lt;= m)  &lt;br/>
</span><span class='line'>      temp[k++] = a[i++];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  while (j &lt;= n)  &lt;br/>
</span><span class='line'>      temp[k++] = a[j++];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  for (i = 0; i &lt; k; i++)  &lt;br/>
</span><span class='line'>      a[first + i] = temp[i];  &lt;br/>
</span><span class='line'>}  &lt;br/>
</span><span class='line'>public static void mergesort(int a[], int first, int last, int temp[]) {  &lt;br/>
</span><span class='line'>  if (first &lt; last) {  &lt;br/>
</span><span class='line'>      int mid = (first + last) / 2;  &lt;br/>
</span><span class='line'>      mergesort(a, first, mid, temp);    //左边有序  &lt;br/>
</span><span class='line'>      mergesort(a, mid + 1, last, temp); //右边有序  &lt;br/>
</span><span class='line'>      mergearray(a, first, mid, last, temp); //再将二个有序数列合并  &lt;br/>
</span><span class='line'>  }  &lt;br/>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li>示意图：</li>
</ul>


<p><img src="/images/mypictures/0007.gif" alt="guibing" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[远程桌面登录]]></title>
    <link href="http://Jing5022.github.io/blog/2013/11/27/yuan-cheng-zhuo-mian-deng-lu/"/>
    <updated>2013-11-27T14:12:59+08:00</updated>
    <id>http://Jing5022.github.io/blog/2013/11/27/yuan-cheng-zhuo-mian-deng-lu</id>
    <content type="html"><![CDATA[<h4>1.必要设置在被连接的电脑上操作</h4>

<ul>
<li>关闭防火墙</li>
<li>设置系统用户密码</li>
<li>开启远程登录

<ul>
<li>允许远程协助连接这台计算机（R），在该项前打勾</li>
<li>不允许连接到这台计算机（D），该选项不选，另外两项可任选其中一项</li>
</ul>
</li>
</ul>


<h4>2.在局域网内部实现（在使用连接的电脑上操作）</h4>

<ul>
<li>打开运行，输入“mstsc”并回车</li>
<li>输入被连接电脑的局域网ip（如：192.168.1.100）并回车</li>
<li>输入被连接电脑的用户名和密码或只输入密码</li>
</ul>


<h4>3.通过广域网实现</h4>

<ul>
<li>进入路由器管理界面，选择转发规则，再选择虚拟服务器（在被连接的电脑上操作）</li>
<li>添加新条目，输入端口号（默认为3389，如果没做更改则填3389），输入本机的局域网ip地址（在被连接的电脑上操作）
<img src="/images/mypictures/0002-virtual-server.jpg" alt="virtual-server" /></li>
<li><a href="http://www.ip138.com/">点击这里</a>查看路由器的对外ip地址（在被连接的电脑上操作）</li>
<li>打开运行，输入“mstsc”并回车（在使用连接的电脑上操作）</li>
<li>输入路由器的对外ip地址并回车，如果设置中服务端口号不是3389，则输入ip后需加上冒号和端口号（在使用连接的电脑上操作）</li>
<li>输入被连接电脑的用户名和密码或只输入密码（在使用连接的电脑上操作）</li>
</ul>


<h4>4.通过广域网使用花生壳实现</h4>

<ul>
<li>免费申请花生壳域名（如：mycount.vicp.cc）</li>
<li>进入路由器管理界面（在被连接的电脑上操作）</li>
<li>选择转发规则，再选择虚拟服务器，添加新条目，输入端口号（默认为3389，如果没做更改则填3389），输入本机的局域网ip地址（在被连接的电脑上操作）</li>
<li>选择动态DNS，输入花生壳的帐号（不用后缀，如：mycount.vicp.cc只需输入mycount）和密码，勾选启用DDNS，点击登录（在被连接的电脑上操作）</li>
<li>打开运行，输入“mstsc”并回车（在使用连接的电脑上操作）</li>
<li>输入花生壳帐号和密码，如果设置中服务端口号不是3389，则输入ip后需加上冒号和端口号（在使用连接的电脑上操作）</li>
<li>输入被连接电脑的用户名和密码或只输入密码（在使用连接的电脑上操作）</li>
</ul>

]]></content>
  </entry>
  
</feed>
